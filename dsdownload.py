# -*- coding: utf-8 -*-
"""DSDownload.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KX9x-rqyj0XfUkLtfOVh8t8T_kW0hs0u

# Downloading content onto colab file system.
The following assumes the colab environment.  This code is not meant for general usage.  This decision allows me to keep the code simple.

Assumptions


*   Colab VMs are reliable
*   Colab VMs will be recycled

These assumptions simply means that you can count on the VM to do work correctly while it is still assigned to you, but the VM will be yanked from under you.  So, it is necessary to backup intermediate state information to a Google drive.

Resist any attempt to mount your Google drive and use it for anything other than backups and restores of intermediate state information.  This is because Google drive accesses most likely entail network traffic.

## Utility Functions
"""

import requests, os

def download(url, destDir = '.', overwrite=False):
  if not os.path.isdir(destDir):
    print('Make dir:', destDir)
    os.mkdir(destDir)
    
  baseName = os.path.basename(url)
  path = os.path.join(destDir, baseName)
  print('Destination path:', path, 'in', os.getcwd())
  
  if overwrite:
    if os.path.exists(path):
      print('Deleting', path)
      os.remove(path)
    
  if os.path.exists(path):
    print(path, 'exits')
    return path

  print('Downloading', url)
  r = requests.get(url, allow_redirects=True)
  open(path, 'wb').write(r.content)
  return path

"""Test code downloads aclImdb and GLOVE."""

def testDownload():
  download('http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')
  print(os.listdir())
  download('http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz',
           destDir='tmp')
  print(os.listdir('tmp'))
  download('http://nlp.stanford.edu/data/glove.6B.zip')
  print(os.listdir())
  download('http://nlp.stanford.edu/data/glove.6B.zip',
          destDir='tmp')
  print(os.listdir('tmp'))

#testDownload()

import tarfile, os, shutil

def untar(gzName, overwrite=False):  
  t = tarfile.open(name=gzName, mode='r:gz')
  topLevelDirInTar = os.path.commonprefix(t.getnames())
  destDir = os.path.dirname(gzName)
  topLevelDir = os.path.join(destDir, topLevelDirInTar)
  
  if overwrite:
    if (os.path.isdir(topLevelDir)):
      print('rmtree', topLevelDir)
      shutil.rmtree(topLevelDir)
  
  if (os.path.isdir(topLevelDir)):
    print('Dir', topLevelDir, 'already exists')
    return topLevelDir

  print('Extracting', topLevelDir)
  t.extractall(destDir)
  return topLevelDir

"""Test code extracts content from tar.gz files."""

def testUnTar():
  untar('aclImdb_v1.tar.gz', overwrite=False)
  print(os.listdir())
  untar('tmp/aclImdb_v1.tar.gz', overwrite=False)
  print(os.listdir('tmp'))

#testUnTar()

"""Extract content from zip file."""

import os, zipfile, shutil

def unzip(zipName, overwrite=False):
  basename = os.path.basename(zipName)
  zipDirName = os.path.splitext(basename)[0]

  destDir = os.path.dirname(zipName)
  zipDir = os.path.join(destDir, zipDirName)
  print('zipDir is', zipDir)
  
  if overwrite:
    if (os.path.isdir(zipDir)):
      print('rmtree', zipDir)
      shutil.rmtree(zipDir)
    
  if (os.path.isdir(zipDir)):
    print('Dir', zipDir, 'already exists')
    return zipDir

  print('Extracting', zipName)
  zip_ref = zipfile.ZipFile(zipName, 'r')
  zip_ref.extractall(zipDir)
  return zipDir

"""Extract zip file content."""

def testUpzip():
  unzip('glove.6B.zip', overwrite=False)
  os.listdir('glove.6B')
  unzip('tmp/glove.6B.zip', overwrite=True)
  os.listdir('tmp/glove.6B')

#testUpzip()

def unpack(path, overwrite=False):
  prefix, ext = os.path.splitext(path)
  if (ext.lower() == '.zip'):
    unzip(path, overwrite=overwrite)
    return
  if (ext.lower() == '.gz'):
    prefix, ext = os.path.splitext(prefix)
    if (ext.lower() == '.tar'):
      untar(path, overwrite=overwrite)
      return
  print("unknown format")

import os, errno

def createDatasetDir(dsDir = '/content/dataset'):
  try:
      os.makedirs(dsDir)
  except OSError as e:
      if e.errno != errno.EEXIST:
          raise
  return dsDir

def getDS(urls =[], dsDir = '/content/dataset', overwrite=False):
  cwd = os.getcwd()
  print(cwd)
  os.chdir(createDatasetDir(dsDir=dsDir))
  print(os.getcwd())
  for url in urls:
    print('Getting', url)
    download(url, overwrite=overwrite)
    basename = os.path.basename(url)
    unpack(basename, overwrite=overwrite)
  
  os.chdir(cwd)
  return dsDir

"""Usage example follows:

getDS(urls=['http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz',
            'http://nlp.stanford.edu/data/glove.6B.zip'],
      dsDir = '/content/dataset')

Nuke the content.  Use with caution.
"""

#import shutil
#shutil.rmtree('/content/tmp/')

"""Pull in py files into colab.  The content will be in colabUtil folder."""

# !git clone https://github.com/cmcheungMOOC/colabUtil.git

"""The following imports a py module from colabUtil.

import sys
sys.path.insert(0, '/content/colabUtil')

import dsdownload as dl

dl.download('http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')
dl.untar('aclImdb_v1.tar.gz')
"""

#createDatasetDir()