# -*- coding: utf-8 -*-
"""Download Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KX9x-rqyj0XfUkLtfOVh8t8T_kW0hs0u

# Downloading content onto colab file system.
The following assumes the colab environment.  This code is not meant for general usage.  This decision allows me to keep the code simple.

Assumptions


*   Colab VMs are reliable
*   Colab VMs will be recycled

These assumptions simply means that you can count on the VM to do work correctly while it is still assigned to you, but the VM will be yanked from under you.  So, it is necessary to backup intermediate state information to a Google drive.

Resist any attempt to mount your Google drive and use it for anything other than backups and restores of intermediate state information.  This is because Google drive accesses most likely entail network traffic.
"""

"""## Utility Functions
Some utility functions.  These needs to be moved into a module soon.
"""

import requests, os

def download(url, destDir = '.', override = False):
  if not os.path.isdir(destDir):
    print('Make dir', destDir)
    os.mkdir(destDir)
  baseName = os.path.basename(url)
  path = os.path.join(destDir, baseName)
  print('Destination path:', path)
  if override:
    print('Deleting', path)
    os.remove(path)    
  if os.path.exists(path):
    print(path, 'exits')
    return path

  print('Downloading', url)
  r = requests.get(url, allow_redirects=True)
  open(path, 'wb').write(r.content)
  return path


import tarfile, os, shutil

def untar(gzName, overwrite=False):  
  t = tarfile.open(name=gzName, mode='r:gz')
  topLevelDirInTar = os.path.commonprefix(t.getnames())
  destDir = os.path.dirname(gzName)
  topLevelDir = os.path.join(destDir, topLevelDirInTar)
  
  if overwrite:
    print('rmtree', topLevelDir)
    shutil.rmtree(topLevelDir)
  
  if (os.path.isdir(topLevelDir)):
    print(topLevelDir, 'already exists')
    return topLevelDir

  print('Extracting', topLevelDir)
  t.extractall(destDir)
  return topLevelDir


import os, zipfile, shutil

def unzip(zipName, overwrite=False):
  basename = os.path.basename(zipName)
  zipDirName = os.path.splitext(basename)[0]

  destDir = os.path.dirname(zipName)
  zipDir = os.path.join(destDir, zipDirName)
  print('zipDir is', zipDir)
  
  if overwrite:
    print('rmtree', zipDir)
    shutil.rmtree(zipDir)
    
  if (os.path.isdir(zipDir)):
    print(zipDir, 'already exists')
    return zipDir

  print('Extracting', zipName)
  zip_ref = zipfile.ZipFile(zipName, 'r')
  zip_ref.extractall(zipDir)
  return zipDir
